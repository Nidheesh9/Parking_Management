    const getUnparkedCars = async () => {
        try { 
            const response = await fetch(`${host}/api/user/getUnparkedCars`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "auth-token": localStorage.getItem('auth-token'),
                }
            });
            const json = await response.json();
            if (!json.success) {
                throw new Error(json.message || 'Unparked Car fetching failed');
            }
            // toast.success("Car Details Fetched");
            return json;
        }
        catch (error) {
            console.log({ update: "Cannot Fetched Unparked car", error: error });
            return;
        }
    }

    const getParkedCars = async () => {
        try { 
            const response = await fetch(`${host}/api/user/getParkedCars`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "auth-token": localStorage.getItem('auth-token'),
                }
            });
            const json = await response.json();
            if (!json.success) {
                throw new Error(json.message || 'Parked Car fetching failed');
            }
            // toast.success("Car Details Fetched");
            return json;
        }
        catch (error) {
            console.log({ update: "Cannot Fetched Parked car", error: error });
            return;
        }
    }

    const removeParkedCar = async ({car_id}) => {
        try { 
            const response = await fetch(`${host}/api/user/removeFromParking`, {
                method: "POST",
                headers:{
                    "Content-Type": "application/json"
                },
                body : JSON.stringify({car_id}),
            });
            const json = await response.json();
            if (!json.success) {
                throw new Error(json.message || 'Parked Car removing failed');
            }
            toast.success("Car Removed");
            return;
        }
        catch (error) {
            console.log({ update: "Cannot remove Parked car", error: error });
            return;
        }
    }









//new
exports.get_parked_cars = async (req, res) => {
  const owner_id = req.user.id;
  // console.log("owner Id : ",owner_id);

  if (!owner_id) {
    return res.status(400).json({ message: "No Parked Cars Found" });
  }

  try {
    db.query(
    `SELECT * FROM car
    WHERE car_owner = ? and car_id IN 
    ( SELECT car.car_id FROM car
    LEFT JOIN parking ON car.car_id = parking.car_id
    WHERE parking.car_id IS NOT NULL);`,
      [owner_id],
      (error, results) => {
        if (error) {
          console.error("Database error:", error);
          return res
            .status(500)
            .json({ message: "Database error", error, success: false });
        }

        if (results.length === 0) {
          return res
            .status(404)
            .json({ message: "No Parked Cars for User", success: false });
        }

        return res
          .status(200)
          .json({
            message: "Parked Cars retrieved successfully",
            data: results,
            success: true,
          });
      }
    );
  } catch (err) {
    console.error("Unexpected error:", err);
    return res
      .status(500)
      .json({ message: "Unexpected error", error: err, success: false });
  }
};

exports.get_unparked_cars = async (req, res) => {
  const owner_id = req.user.id;
  // console.log("owner Id : ",owner_id);

  if (!owner_id) {
    return res.status(400).json({ message: "No Cars Found" });
  }

  try {
    db.query(
    `SELECT * FROM car
    WHERE car_owner = ? and car_id IN 
    ( SELECT car.car_id FROM car
    LEFT JOIN parking ON car.car_id = parking.car_id
    WHERE parking.car_id IS NULL);`,
      [owner_id],
      (error, results) => {
        if (error) {
          console.error("Database error:", error);
          return res
            .status(500)
            .json({ message: "Database error", error, success: false });
        }

        if (results.length === 0) {
          return res
            .status(404)
            .json({ message: "No Unparked Cars for User", success: false });
        }

        return res
          .status(200)
          .json({
            message: "Unparked Cars retrieved successfully",
            data: results,
            success: true,
          });
      }
    );
  } catch (err) {
    console.error("Unexpected error:", err);
    return res
      .status(500)
      .json({ message: "Unexpected error", error: err, success: false });
  }
};

exports.delete_car_from_parking = async (req, res) => {
    console.log("Req : ",req.body);
    const {car_id} = req.body;
    console.log("Car id : ",car_id);
    
    if (!car_id){
        return res.status(400).json({ message: "No Cars Found" });
    }

    try {
        db.query(
            `UPDATE parking_slot 
            SET isEmpty = 1 
             WHERE parking_id IN (
                SELECT parking_id FROM parking WHERE car_id = ?
             )`,
            [car_id],
            (updateError, updateResults) => {
              if (updateError) {
                console.error("Database error during UPDATE:", updateError);
                return res.status(500).json({
                  message: "Database error during UPDATE",
                  error: updateError,
                  success: false,
                });
              }
          
              db.query(
                `DELETE FROM parking WHERE car_id = ?`,
                [car_id],
                (deleteError, deleteResults) => {
                  if (deleteError) {
                    console.error("Database error during DELETE:", deleteError);
                    return res.status(500).json({
                      message: "Database error during DELETE",
                      error: deleteError,
                      success: false,
                    });
                  }
          
                  return res.status(200).json({
                    message: "Unparked cars processed successfully",
                    updateResults,
                    deleteResults,
                    success: true,
                  });
                }
              );
            }
          );          
    } catch (err) {
      console.error("Unexpected error:", err);
      return res
        .status(500)
        .json({ message: "Unexpected error", error: err, success: false });
    }
};
